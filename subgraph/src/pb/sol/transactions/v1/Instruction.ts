// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { BetData } from "./BetData";
import { BetConfirmation } from "./BetConfirmation";
import { OperationalStatus } from "./OperationalStatus";

export class Instruction {
  static encode(message: Instruction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.programId);

    const accounts = message.accounts;
    if (accounts.length !== 0) {
      for (let i: i32 = 0; i < accounts.length; ++i) {
        writer.uint32(18);
        writer.string(accounts[i]);
      }
    }

    const placeBet = message.placeBet;
    if (placeBet !== null) {
      writer.uint32(26);
      writer.fork();
      BetData.encode(placeBet, writer);
      writer.ldelim();
    }

    const placeFreeBet = message.placeFreeBet;
    if (placeFreeBet !== null) {
      writer.uint32(34);
      writer.fork();
      BetData.encode(placeFreeBet, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.bool(message.cancelBet);

    const confirmBet = message.confirmBet;
    if (confirmBet !== null) {
      writer.uint32(50);
      writer.fork();
      BetConfirmation.encode(confirmBet, writer);
      writer.ldelim();
    }

    writer.uint32(56);
    writer.uint64(message.claimBet);

    writer.uint32(64);
    writer.int64(message.setCancellationDelay);

    writer.uint32(72);
    writer.int32(message.setOperationalStatus);

    writer.uint32(80);
    writer.uint64(message.setServiceFee);

    writer.uint32(88);
    writer.uint64(message.setRelayerFee);

    writer.uint32(96);
    writer.uint64(message.withdrawFromPool);

    writer.uint32(104);
    writer.uint64(message.withdrawFromFeeAccount);

    writer.uint32(112);
    writer.bool(message.initializeProgram);

    writer.uint32(120);
    writer.bool(message.clearBetAccounts);
  }

  static decode(reader: Reader, length: i32): Instruction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Instruction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.programId = reader.string();
          break;

        case 2:
          message.accounts.push(reader.string());
          break;

        case 3:
          message.placeBet = BetData.decode(reader, reader.uint32());
          break;

        case 4:
          message.placeFreeBet = BetData.decode(reader, reader.uint32());
          break;

        case 5:
          message.cancelBet = reader.bool();
          break;

        case 6:
          message.confirmBet = BetConfirmation.decode(reader, reader.uint32());
          break;

        case 7:
          message.claimBet = reader.uint64();
          break;

        case 8:
          message.setCancellationDelay = reader.int64();
          break;

        case 9:
          message.setOperationalStatus = reader.int32();
          break;

        case 10:
          message.setServiceFee = reader.uint64();
          break;

        case 11:
          message.setRelayerFee = reader.uint64();
          break;

        case 12:
          message.withdrawFromPool = reader.uint64();
          break;

        case 13:
          message.withdrawFromFeeAccount = reader.uint64();
          break;

        case 14:
          message.initializeProgram = reader.bool();
          break;

        case 15:
          message.clearBetAccounts = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  programId: string;
  accounts: Array<string>;
  placeBet: BetData | null;
  placeFreeBet: BetData | null;
  cancelBet: bool;
  confirmBet: BetConfirmation | null;
  claimBet: u64;
  setCancellationDelay: i64;
  setOperationalStatus: OperationalStatus;
  setServiceFee: u64;
  setRelayerFee: u64;
  withdrawFromPool: u64;
  withdrawFromFeeAccount: u64;
  initializeProgram: bool;
  clearBetAccounts: bool;

  constructor(
    programId: string = "",
    accounts: Array<string> = [],
    placeBet: BetData | null = null,
    placeFreeBet: BetData | null = null,
    cancelBet: bool = false,
    confirmBet: BetConfirmation | null = null,
    claimBet: u64 = 0,
    setCancellationDelay: i64 = 0,
    setOperationalStatus: OperationalStatus = 0,
    setServiceFee: u64 = 0,
    setRelayerFee: u64 = 0,
    withdrawFromPool: u64 = 0,
    withdrawFromFeeAccount: u64 = 0,
    initializeProgram: bool = false,
    clearBetAccounts: bool = false
  ) {
    this.programId = programId;
    this.accounts = accounts;
    this.placeBet = placeBet;
    this.placeFreeBet = placeFreeBet;
    this.cancelBet = cancelBet;
    this.confirmBet = confirmBet;
    this.claimBet = claimBet;
    this.setCancellationDelay = setCancellationDelay;
    this.setOperationalStatus = setOperationalStatus;
    this.setServiceFee = setServiceFee;
    this.setRelayerFee = setRelayerFee;
    this.withdrawFromPool = withdrawFromPool;
    this.withdrawFromFeeAccount = withdrawFromFeeAccount;
    this.initializeProgram = initializeProgram;
    this.clearBetAccounts = clearBetAccounts;
  }
}
