type Bet @entity {
  id: ID!                 # PublicKey of the bet account as a base58-encoded string
  account: String!        # PublicKey of the bet account as a base58-encoded string
  bettor: String!         # PublicKey of the bettor as a base58-encoded string
  placedAt: BigInt!       # Use a custom scalar for BigInt
  minOdds: BigInt!        # odds requested, Use a custom scalar for BigInt
  amount: BigInt!         # Use a custom scalar for BigInt
  status: BetStatus!      # Enum type for BetStatus
  isLive: Boolean!        # Boolean for live status
  isSOLfree: Boolean!     # Boolean for SOL-free status
  # selections: [Selection!]!
  selections: String!
  betId: Int!           # Optional field for bet ID
  freeBetId: Int!          # Optional field for free bet ID
  result: Result!         # Result Enum
  settledOdds: BigInt!    # odds settled at, Use a custom scalar for BigInt
  placedTimestamp: BigInt!
  placedTxHash: String!
  confirmedTimestamp: BigInt!
  confirmedTxHash: String!
  claimedTimestamp: BigInt!
  claimedTxHash: String!
}

type Record @entity{
  id: ID!
  timestamp: BigInt!
  txHash: String!
  # betPlaced: Bet @derivedFrom(field: "placed")
  # bet: Bet
}

enum BetStatus {
  PENDING
  ACTIVE
  FAILED
  CLAIMED
  LOST
  CANCELED
}

type Selection @entity {
  id: ID!             
  conditionId: String!
  outcomeId: String!
  bet: Bet! 
}

enum Result {
  PENDING
  WIN
  LOST
  REFUND
}

