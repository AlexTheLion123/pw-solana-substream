type MyEntity @entity {
    id: ID!
}

type Bet @entity {
  id: ID!                 # PublicKey of the bet account as a base58-encoded string
  account: String!        # PublicKey of the bet account as a base58-encoded string
  bettor: String!         # PublicKey of the bettor as a base58-encoded string
  placedAt: BigInt!       # Use a custom scalar for BigInt
  minOdds: BigInt!        # odds requested, Use a custom scalar for BigInt
  amount: BigInt!         # Use a custom scalar for BigInt
  status: BetStatus!      # Enum type for BetStatus
  isLive: Boolean!        # Boolean for live status
  isSOLfree: Boolean!     # Boolean for SOL-free status
  selections: [Selection!]! # Array of Selection objects
  betId: String           # Optional field for bet ID
  freeBetId: Int          # Optional field for free bet ID
  result: Result!         # Result Enum
  settledOdds: BigInt!    # odds settled at, Use a custom scalar for BigInt
  placed: Record!         # Record of txHash and timestamp for record keeping
  confirmed: Record!      # Record of txHash and timestamp for record keeping
  claimed: Record!        # Record of txHash and timestamp for record keeping
}

type Record {
  timestamp: BigInt!      # Use a custom scalar for BigInt
  txHash: String!
}

# Enum type for BetStatus
enum BetStatus {
  PENDING
  ACTIVE
  FAILED
  CLAIMED
  CANCELED
}

# Type for Selection
type Selection @entity {
  # Define fields of Selection here
  id: ID!              # Example field (replace with actual fields)
  conditionId: String! # Example field (replace with actual fields)
  outcomeId: String!   # Example field (replace with actual fields)
}

# Type for Result
enum Result {
  PENDING
  WIN
  LOST
  REFUND
}
